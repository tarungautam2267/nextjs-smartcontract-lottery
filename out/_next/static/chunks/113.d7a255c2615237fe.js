(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[113,917],{21357:function(t,n,e){"use strict";e.r(n),e.d(n,{WalletConnectV1Adapter:function(){return d}});var i=e(4942),o=e(71516),r=e(41436),c=e(52062),s=e(2043),a=e.n(s);function h(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}class d extends r.J5{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),(0,i.Z)(this,"name",r.rW.WALLET_CONNECT_V1),(0,i.Z)(this,"adapterNamespace",r.yk.EIP155),(0,i.Z)(this,"currentChainNamespace",r.EN.EIP155),(0,i.Z)(this,"type",r.hN.EXTERNAL),(0,i.Z)(this,"adapterOptions",void 0),(0,i.Z)(this,"status",r.MP.NOT_READY),(0,i.Z)(this,"adapterData",{uri:""}),(0,i.Z)(this,"connector",null),(0,i.Z)(this,"wcProvider",null),(0,i.Z)(this,"rehydrated",!1),this.adapterOptions=function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?h(Object(e),!0).forEach((function(n){(0,i.Z)(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):h(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({},t),this.chainConfig=t.chainConfig||null}get connected(){var t;return!(null===(t=this.connector)||void 0===t||!t.connected)}get provider(){var t;return(null===(t=this.wcProvider)||void 0===t?void 0:t.provider)||null}set provider(t){throw new Error("Not implemented")}async init(){super.checkInitializationRequirements(),this.chainConfig||(this.chainConfig=(0,r.h2)(r.EN.EIP155,1)),this.connector=this.getWalletConnectInstance(),this.wcProvider=new c.WalletConnectProvider({config:{chainConfig:this.chainConfig}}),this.emit(r.n2.READY,r.rW.WALLET_CONNECT_V1),this.status=r.MP.READY,this.connector.connected&&(this.rehydrated=!0,await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId.toString()}))}async connect(){if(super.checkConnectionRequirements(),!this.connector)throw r.Ty.notReady("Wallet adapter is not ready yet");if(this.connected)return await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId.toString()}),this.provider;var t;this.status!==r.MP.CONNECTING&&(null!==(t=this.adapterOptions.adapterSettings)&&void 0!==t&&t.qrcodeModal&&(this.connector=this.getWalletConnectInstance()),await this.createNewSession(),this.status=r.MP.CONNECTING,this.emit(r.n2.CONNECTING,{adapter:r.rW.WALLET_CONNECT_V1}));return new Promise(((t,n)=>{if(!this.connector)return n(r.Ty.notReady("Wallet adapter is not ready yet"));this.connector.on("modal_closed",(async()=>(this.status=r.MP.READY,this.emit(r.n2.READY,r.rW.WALLET_CONNECT_V1),n(new Error("User closed modal")))));try{this.connector.on("connect",(async(n,e)=>(n&&this.emit(r.n2.ERRORED,n),await this.onConnectHandler(e.params[0]),t(this.provider))))}catch(e){a().error("Wallet connect v1 adapter error while connecting",e),this.status=r.MP.READY,this.rehydrated=!0,this.emit(r.n2.ERRORED,e),n(e instanceof r.up?e:r.RM.connectionError("Failed to login with wallet connect: ".concat((null===e||void 0===e?void 0:e.message)||"")))}}))}async getUserInfo(){if(!this.connected)throw r.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async disconnect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};const{cleanup:n}=t;if(!this.connector||!this.connected)throw r.RM.notConnectedError("Not connected with wallet");await this.connector.killSession(),this.rehydrated=!1,n?(this.connector=null,this.status=r.MP.NOT_READY,this.wcProvider=null):this.status=r.MP.READY,this.emit(r.n2.DISCONNECTED)}async createNewSession(){var t,n;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{forceNewSession:!1};if(!this.connector)throw r.Ty.notReady("Wallet adapter is not ready yet");if(e.forceNewSession&&this.connector.pending&&await this.connector.killSession(),null===(t=this.adapterOptions)||void 0===t||null===(n=t.adapterSettings)||void 0===n||!n.qrcodeModal)return new Promise(((t,n)=>{var e;if(!this.connector)return n(r.Ty.notReady("Wallet adapter is not ready yet"));a().debug("creating new session for web3auth wallet connect"),this.connector.on("display_uri",(async(e,i)=>{var o;if(e)return this.emit(r.n2.ERRORED,r.RM.connectionError("Failed to display wallet connect qr code")),n(e);const c=i.params[0];return this.updateAdapterData({uri:c}),null===(o=this.connector)||void 0===o||o.off("display_uri"),t()})),this.connector.createSession({chainId:parseInt((null===(e=this.chainConfig)||void 0===e?void 0:e.chainId)||"0x1",16)}).catch((t=>(a().error("error while creating new wallet connect session",t),this.emit(r.n2.ERRORED,t),n(t))))}));var i;await this.connector.createSession({chainId:parseInt((null===(i=this.chainConfig)||void 0===i?void 0:i.chainId)||"0x1",16)})}async onConnectHandler(t){if(!this.connector||!this.wcProvider)throw r.Ty.notReady("Wallet adapter is not ready yet");if(!this.chainConfig)throw r.Ty.invalidParams("Chain config is not set");const{chainId:n}=t;a().debug("connected chainId",n);const e=parseInt(n,(0,r.H2)(n)?16:10);if(e!==parseInt(this.chainConfig.chainId,16))return await this.createNewSession({forceNewSession:!0}),void this.emit(r.n2.ERRORED,r.Ty.fromCode(5e3,"Not connected to correct chainId. Expected: ".concat(this.chainConfig.chainId,", Current: ").concat(e,", Please switch to correct chain from wallet")));await this.wcProvider.setupProvider(this.connector),this.subscribeEvents(this.connector),this.status=r.MP.CONNECTED,this.emit(r.n2.CONNECTED,{adapter:r.rW.WALLET_CONNECT_V1,reconnected:this.rehydrated})}subscribeEvents(t){t.on("session_update",(async t=>{t&&this.emit(r.n2.ERRORED,t)}))}getWalletConnectInstance(){const t=this.adapterOptions.adapterSettings||{};return t.bridge=t.bridge||"https://bridge.walletconnect.org",new o.Z(t)}}},62859:function(){},75304:function(){},32772:function(){},64123:function(){},29704:function(){},88924:function(){}}]);